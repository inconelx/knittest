// utils/auth.js
import axios from 'axios'
import router from '@/router/index.js'
import { ElMessageBox } from 'element-plus'

let refreshTimer = null // ÂÖ®Â±ÄÂîØ‰∏ÄËÆ°Êó∂Âô®ÂºïÁî®
let isRefreshing = false
let refreshPromise = null

//ÈíàÁªáapi
export const knit_api = axios.create({
  // baseURL: 'https://192.168.0.104:5000',
  baseURL: 'http://localhost:5000',
  timeout: 5000,
})

// ËØ∑Ê±ÇÊã¶Êà™Âô®ÔºötokenÂà∑Êñ∞Êó∂Á≠âÂæÖ
knit_api.interceptors.request.use(
  async (config) => {
    if (config.url !== '/api/refresh-token') {
      if (refreshPromise) {
        // Â¶ÇÊûúÊ≠£Âú®Âà∑Êñ∞ÔºåÁ≠âÂæÖÂà∑Êñ∞ÂÆåÊàêÂÜçÁªßÁª≠
        await refreshPromise
      }
    }
    const token = sessionStorage.getItem('token')
    if (token) {
      // Ê∑ªÂä†Âà∞ËØ∑Ê±ÇÂ§¥ÈÉ®ÁöÑ Authorization Â≠óÊÆµ
      config.headers['Authorization'] = token
    }
    return config
  },
  (error) => Promise.reject(error),
)
// ÂìçÂ∫îÊã¶Êà™Âô®ÔºöÂ§ÑÁêÜ token Â§±ÊïàÁ≠â
knit_api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response && error.response.status === 401) {
      // console.warn('‚õî ÁôªÂΩïÁä∂ÊÄÅÂ§±ÊïàÔºåË∑≥ËΩ¨ÁôªÂΩïÈ°µ')
      const currentPath = router.currentRoute.value.path
      if (currentPath !== '/login' && currentPath !== '/') {
        try {
          // Á≠âÂæÖÁî®Êà∑ÂÖ≥Èó≠ÂºπÁ™óÂêéÂÜçË∑≥ËΩ¨
          await ElMessageBox.alert(
            'ÁôªÂΩïÁä∂ÊÄÅÊó†ÊïàÔºåÂèØËÉΩÊúâÂ¶Ç‰∏ãÂéüÂõ†Ôºö1„ÄÅÊÇ®Â∞öÊú™ÁôªÂΩïÔºõ2„ÄÅÁôªÂΩïÁ≠æÂêçËøáÊúüÔºõ3„ÄÅÊúâÂÖ∂ÂÆÉÁî®Êà∑Âú®Âà´Â§Ñ‰ΩøÁî®Âêå‰∏ÄË¥¶Âè∑ÁôªÂΩïÔºå‰∏îË∂ÖÂá∫Ë¥¶Âè∑ÁôªÂΩïÊï∞ÈôêÂà∂„ÄÇËØ∑ÈáçÊñ∞ÁôªÂΩï„ÄÇ',
            'ÊèêÁ§∫',
            {
              confirmButtonText: 'Á°ÆÂÆö',
              type: 'warning',
              showClose: false,
              closeOnClickModal: false,
              closeOnPressEscape: false,
            },
          )
        } catch (_) {
          // Áî®Êà∑Êåâ ESC ÊàñÁÇπÂèâÂè∑‰πü‰ºöËß¶Âèë rejectÔºåÂèØ‰ª•ÂøΩÁï•
        }
      }
      sessionStorage.clear()
      stopTokenRefresher()
      router.push('/login')
    }
    return Promise.reject(error)
  },
)

async function refreshToken() {
  if (isRefreshing) return refreshPromise // ÈÅøÂÖçÈáçÂ§çÂà∑Êñ∞

  isRefreshing = true
  refreshPromise = (async () => {
    try {
      const res = await knit_api.post('/api/refresh-token')
      sessionStorage.setItem('token', res.data.token)
      sessionStorage.setItem('refresh_at', Math.floor(Date.now() / 1000))
      sessionStorage.setItem('expires_seconds', res.data.expires_seconds)
      sessionStorage.setItem('user_name', res.data.user_name)
      // console.log('üîÅ Token refreshed successfully.')
    } catch (error) {
      // console.error('‚ùå Token refresh failed:', error)
      stopTokenRefresher()
      throw error
    } finally {
      isRefreshing = false
      refreshPromise = null
    }
  })()

  return refreshPromise
}

export function initTokenRefresher() {
  const expiresSeconds = parseInt(sessionStorage.getItem('expires_seconds'))
  const refreshAt = parseInt(sessionStorage.getItem('refresh_at'))

  if (!expiresSeconds || !refreshAt) {
    // console.warn('‚ö†Ô∏è Cannot start token refresher: missing expiration.')
    return
  }

  if (
    Math.floor(Date.now() / 1000) + Math.floor(expiresSeconds / 2) >=
    refreshAt + expiresSeconds
  ) {
    refreshToken()
    stopTokenRefresher()
  }

  if (refreshTimer === null) {
    refreshTimer = setInterval(
      async () => {
        refreshToken()
      },
      Math.max(Math.floor(expiresSeconds / 2), 60) * 1000,
    )
  }
}

export function stopTokenRefresher() {
  if (refreshTimer) {
    clearInterval(refreshTimer)
    refreshTimer = null
    // console.log('‚èπÔ∏è Token refresher stopped.')
  }
}
